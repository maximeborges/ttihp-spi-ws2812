/* Generated by Yosys 0.44 (git sha1 80ba43d26, g++ 14.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3) */

(* top =  1  *)
(* generator = "Amaranth" *)
module top(rst, cs, copi, out0, clk);
    input clk;
  wire clk;
    wire \clk$17 ;
    wire \clk$7 ;
    wire \clk$8 ;
    input copi;
  wire copi;
    wire \copi$5 ;
    input cs;
  wire cs;
    wire \cs$6 ;
    wire [47:0] data_in;
    wire data_out;
    wire enable;
    output out0;
  wire out0;
    input rst;
  wire rst;
    wire \rst$18 ;
    wire word_complete;
    wire [47:0] word_received;
    wire word_size;
    wire [5:0] \word_size$11 ;
    wire [5:0] word_width;
    \top.led1  led1 (
    .\data_in$9 (data_in),
    .data_out(out0),
    .enable(enable)
  );
    \top.spi  spi (
    .copi(copi),
    .cs(cs),
    .word_complete(enable),
    .word_received(data_in)
  );
  assign \copi$5  = copi;
  assign \cs$6  = cs;
  assign \clk$7  = clk;
  assign \clk$8  = clk;
  assign data_out = out0;
  assign word_size = 1'h0;
  assign \word_size$11  = 6'h00;
  assign word_width = 6'h00;
  assign word_complete = enable;
  assign word_received = data_in;
  assign \clk$17  = 1'h0;
  assign \rst$18  = 1'h0;
endmodule

(* generator = "Amaranth" *)
module \top.led1 (enable, \data_in$9 , data_out);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [1:0] \$1 ;
  reg [47:0] \$10 ;
  reg \$11 ;
  reg [1:0] \$12 ;
  reg [5:0] \$13 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [2:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [6:0] \$8 ;
  wire \$9 ;
    reg [5:0] bit_counter = 6'h00;
    wire clk;
    wire current_bit;
    reg [1:0] cycle_counter = 2'h0;
    reg [47:0] data_in = 48'h000000000000;
    input [47:0] \data_in$9 ;
  wire [47:0] \data_in$9 ;
    output data_out;
  reg data_out;
    input enable;
  wire enable;
    reg fsm_state = 1'h0;
    wire rst;
    wire word_size;
  assign current_bit = data_in >> bit_counter;
  assign \$1  = current_bit ?   assign \$2  = cycle_counter <   assign \$3  = !   assign \$5  = cycle_counter +   assign \$6  = ~   assign \$7  = cycle_counter >=   assign \$8  = bit_counter +   assign \$9  = bit_counter >=     always @(negedge 1'h0)
    data_in <= \$10 ;
    always @(negedge 1'h0)
    fsm_state <= \$11 ;
    always @(negedge 1'h0)
    cycle_counter <= \$12 ;
    always @(negedge 1'h0)
    bit_counter <= \$13 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          data_out = 1'h0;
      1'h1:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            data_out = 1'h1;
          end else begin
            data_out = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = data_in;
    casez (fsm_state)
      1'h0:
          if (enable) begin
            \$10  = \data_in$9 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          if (enable) begin
            \$11  = 1'h1;
          end
      1'h1:
        begin
          if (\$6 ) begin
            \$11  = 1'h0;
          end
          if (\$7 ) begin
            if (\$9 ) begin
              \$11  = 1'h0;
            end
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = cycle_counter;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          /* empty */;
      1'h1:
        begin
          \$12  = \$5 [1:0];
          if (\$7 ) begin
            \$12  = 2'h0;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = bit_counter;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          /* empty */;
      1'h1:
          if (\$7 ) begin
            \$13  = \$8 [5:0];
          end
    endcase
  end
  assign clk = 1'h0;
  assign rst = 1'h0;
  assign word_size = 1'h0;
  assign \$4  = fsm_state;
endmodule

(* generator = "Amaranth" *)
module \top.spi (copi, word_complete, word_received, cs);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire \$1 ;
  wire \$10 ;
  reg \$11 ;
  reg \$12 ;
  reg [2:0] \$13 ;
  reg [5:0] \$14 ;
  reg [7:0] \$15 ;
  reg [7:0] \$16 ;
  reg [47:0] \$17 ;
  reg [47:0] \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire [6:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [6:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
    reg [5:0] bit_count = 6'h00;
    wire clk;
    reg [7:0] command = 8'h00;
    reg command_ready = 1'h0;
    input copi;
  wire copi;
    input cs;
  wire cs;
    reg [7:0] current_command = 8'h00;
    reg [47:0] current_word = 48'h000000000000;
    reg [2:0] fsm_state = 3'h1;
    wire idle;
    wire rst;
    wire stalled;
    output word_complete;
  reg word_complete = 1'h0;
    output [47:0] word_received;
  reg [47:0] word_received = 48'h000000000000;
    wire [5:0] word_width;
  assign \$1  = ~   assign \$2  = ~   assign \$3  = bit_count <   assign \$4  = bit_count +   assign \$5  = ~   assign \$6  = bit_count <   assign \$7  = bit_count +   assign idle = !   assign stalled = fsm_state ==   assign \$8  = fsm_state ==   assign \$9  = fsm_state ==   assign \$10  = fsm_state ==     always @(negedge 1'h0)
    command_ready <= \$11 ;
    always @(negedge 1'h0)
    word_complete <= \$12 ;
    always @(negedge 1'h0)
    fsm_state <= \$13 ;
    always @(negedge 1'h0)
    bit_count <= \$14 ;
    always @(negedge 1'h0)
    current_command <= \$15 ;
    always @(negedge 1'h0)
    command <= \$16 ;
    always @(negedge 1'h0)
    current_word <= \$17 ;
    always @(negedge 1'h0)
    word_received <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$11  = 1'h0;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$11  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$12  = 1'h0;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$12  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$13  = fsm_state;
    casez (fsm_state)
      3'h1:
          if (\$1 ) begin
            \$13  = 3'h0;
          end
      3'h0:
          if (cs) begin
            \$13  = 3'h2;
          end
      3'h2:
        begin
          if (\$2 ) begin
            \$13  = 3'h0;
          end
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$13  = 3'h3;
          end
        end
      3'h3:
          \$13  = 3'h4;
      3'h4:
        begin
          if (\$5 ) begin
            \$13  = 3'h0;
          end
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$13  = 3'h1;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$14  = bit_count;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          \$14  = 6'h00;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
            \$14  = \$4 [5:0];
          end else begin
            \$14  = 6'h00;
          end
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
            \$14  = \$7 [5:0];
          end else begin
            \$14  = 6'h00;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$15  = current_command;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          if (\$3 ) begin
            \$15  = { current_command[6:0], copi };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$16  = command;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$16  = current_command;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$17  = current_word;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          if (\$6 ) begin
            \$17  = { current_word[46:0], copi };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$18  = word_received;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$18  = current_word;
          end
    endcase
  end
  assign clk = 1'h0;
  assign rst = 1'h0;
  assign word_width = 6'h00;
endmodule
