/*
 * Copyright (c) 2024 Mario Geiger
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Auto-generated from Amaranth design - Set-Reset Gate
 */

`default_nettype none

module top (
    input  wire [7:0] ui_in,    // Dedicated inputs
    output wire [7:0] uo_out,   // Dedicated outputs
    input  wire [7:0] uio_in,   // IOs: Input path
    output wire [7:0] uio_out,  // IOs: Output path
    output wire [7:0] uio_oe,   // IOs: Enable path (active high: 0=input, 1=output)
    input  wire       ena,      // always 1 when the design is powered, so you can ignore it
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);

  // Internal signals for the Amaranth-generated core
  wire rst = !rst_n;  // Convert active-low reset to active-high
  
  // Instantiate the Amaranth-generated core module
  top core (
    .clk(clk),
    .rst(rst),
    
    .cs(ui_in[0]),
    .copi(ui_in[1]),
    
    .out0(uo_out[0]),
  );
  
  // All other output pins must be assigned to 0 when not used
  assign uo_out[7:1] = 7'b0;
  assign uio_out = 8'b0;
  assign uio_oe  = 8'b0;

  // List all unused inputs to prevent warnings
  wire _unused = &{ena, ui_in[7:2], uio_in, 1'b0};

endmodule

// Amaranth-generated core module
/* Generated by Yosys 0.44 (git sha1 80ba43d26, g++ 14.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3) */

(* top =  1  *)
(* src = "/home/mborges/git/ttihp-spi-ws2812/src/top.py:49" *)
(* generator = "Amaranth" *)
module top(copi, out0, cs);
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:47" *)
  wire clk;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire \clk$16 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/top.py:33" *)
  wire \clk$6 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:23" *)
  wire \clk$7 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:45" *)
  input copi;
  wire copi;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:45" *)
  wire \copi$3 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:46" *)
  input cs;
  wire cs;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:46" *)
  wire \cs$4 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:28" *)
  wire [47:0] data_in;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:29" *)
  wire data_out;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:27" *)
  wire enable;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:29" *)
  output out0;
  wire out0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire rst;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:57" *)
  wire word_complete;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:56" *)
  wire [47:0] word_received;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:25" *)
  wire word_size;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/top.py:41" *)
  wire [5:0] \word_size$10 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:49" *)
  wire [5:0] word_width;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/top.py:65" *)
  \top.led1  led1 (
    .\data_in$9 (data_in),
    .data_out(out0),
    .enable(enable)
  );
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/top.py:66" *)
  \top.spi  spi (
    .copi(copi),
    .cs(cs),
    .word_complete(enable),
    .word_received(data_in)
  );
  assign \copi$3  = copi;
  assign \cs$4  = cs;
  assign clk = 1'h0;
  assign \clk$6  = 1'h0;
  assign \clk$7  = 1'h0;
  assign data_out = out0;
  assign word_size = 1'h0;
  assign \word_size$10  = 6'h00;
  assign word_width = 6'h00;
  assign word_complete = enable;
  assign word_received = data_in;
  assign \clk$16  = 1'h0;
  assign rst = 1'h0;
endmodule

(* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:32" *)
(* generator = "Amaranth" *)
module \top.led1 (enable, \data_in$9 , data_out);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [1:0] \$1 ;
  reg [47:0] \$10 ;
  reg \$11 ;
  reg [1:0] \$12 ;
  reg [5:0] \$13 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [2:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [6:0] \$8 ;
  wire \$9 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:38" *)
  reg [5:0] bit_counter = 6'h00;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire clk;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:36" *)
  wire current_bit;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:39" *)
  reg [1:0] cycle_counter = 2'h0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:34" *)
  reg [47:0] data_in = 48'h000000000000;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:28" *)
  input [47:0] \data_in$9 ;
  wire [47:0] \data_in$9 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:29" *)
  output data_out;
  reg data_out;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:27" *)
  input enable;
  wire enable;
  (* src = "/usr/lib/python3.13/contextlib.py:148" *)
  reg fsm_state = 1'h0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire rst;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:25" *)
  wire word_size;
  assign current_bit = data_in >> bit_counter;
  assign \$1  = current_bit ? (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:63" *) 2'h2 : 2'h1;
  assign \$2  = cycle_counter < (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:63" *) \$1 ;
  assign \$3  = ! (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) fsm_state;
  assign \$5  = cycle_counter + (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:57" *) 1'h1;
  assign \$6  = ~ (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:60" *) enable;
  assign \$7  = cycle_counter >= (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:68" *) 2'h3;
  assign \$8  = bit_counter + (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:71" *) 1'h1;
  assign \$9  = bit_counter >= (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:74" *) 1'h0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:34" *)
  always @(negedge 1'h0)
    data_in <= \$10 ;
  (* src = "/usr/lib/python3.13/contextlib.py:148" *)
  always @(negedge 1'h0)
    fsm_state <= \$11 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:39" *)
  always @(negedge 1'h0)
    cycle_counter <= \$12 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/ws2811.py:38" *)
  always @(negedge 1'h0)
    bit_counter <= \$13 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          data_out = 1'h0;
      1'h1:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            data_out = 1'h1;
          end else begin
            data_out = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = data_in;
    casez (fsm_state)
      1'h0:
          if (enable) begin
            \$10  = \data_in$9 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          if (enable) begin
            \$11  = 1'h1;
          end
      1'h1:
        begin
          if (\$6 ) begin
            \$11  = 1'h0;
          end
          if (\$7 ) begin
            if (\$9 ) begin
              \$11  = 1'h0;
            end
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = cycle_counter;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          /* empty */;
      1'h1:
        begin
          \$12  = \$5 [1:0];
          if (\$7 ) begin
            \$12  = 2'h0;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = bit_counter;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          /* empty */;
      1'h1:
          if (\$7 ) begin
            \$13  = \$8 [5:0];
          end
    endcase
  end
  assign clk = 1'h0;
  assign rst = 1'h0;
  assign word_size = 1'h0;
  assign \$4  = fsm_state;
endmodule

(* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:71" *)
(* generator = "Amaranth" *)
module \top.spi (copi, word_complete, word_received, cs);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire \$1 ;
  wire \$10 ;
  reg \$11 ;
  reg \$12 ;
  reg [2:0] \$13 ;
  reg [5:0] \$14 ;
  reg [7:0] \$15 ;
  reg [7:0] \$16 ;
  reg [47:0] \$17 ;
  reg [47:0] \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire [6:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [6:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:76" *)
  reg [5:0] bit_count = 6'h00;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire clk;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:52" *)
  reg [7:0] command = 8'h00;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:53" *)
  reg command_ready = 1'h0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:45" *)
  input copi;
  wire copi;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:46" *)
  input cs;
  wire cs;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:79" *)
  reg [7:0] current_command = 8'h00;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:80" *)
  reg [47:0] current_word = 48'h000000000000;
  (* src = "/usr/lib/python3.13/contextlib.py:148" *)
  reg [2:0] fsm_state = 3'h1;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:60" *)
  wire idle;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:73" *)
  wire rst;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:61" *)
  wire stalled;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:57" *)
  output word_complete;
  reg word_complete = 1'h0;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:56" *)
  output [47:0] word_received;
  reg [47:0] word_received = 48'h000000000000;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:49" *)
  wire [5:0] word_width;
  assign \$1  = ~ (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:95" *) cs;
  assign \$2  = ~ (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:109" *) cs;
  assign \$3  = bit_count < (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:113" *) 4'h8;
  assign \$4  = bit_count + (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:115" *) 1'h1;
  assign \$5  = ~ (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:135" *) cs;
  assign \$6  = bit_count < (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:141" *) 1'h0;
  assign \$7  = bit_count + (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:143" *) 1'h1;
  assign idle = ! (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) fsm_state;
  assign stalled = fsm_state == (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) 1'h1;
  assign \$8  = fsm_state == (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) 2'h2;
  assign \$9  = fsm_state == (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) 2'h3;
  assign \$10  = fsm_state == (* src = "/home/mborges/git/ttihp-spi-ws2812/.venv/lib/python3.13/site-packages/amaranth/hdl/_dsl.py:486" *) 3'h4;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:53" *)
  always @(negedge 1'h0)
    command_ready <= \$11 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:57" *)
  always @(negedge 1'h0)
    word_complete <= \$12 ;
  (* src = "/usr/lib/python3.13/contextlib.py:148" *)
  always @(negedge 1'h0)
    fsm_state <= \$13 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:76" *)
  always @(negedge 1'h0)
    bit_count <= \$14 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:79" *)
  always @(negedge 1'h0)
    current_command <= \$15 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:52" *)
  always @(negedge 1'h0)
    command <= \$16 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:80" *)
  always @(negedge 1'h0)
    current_word <= \$17 ;
  (* src = "/home/mborges/git/ttihp-spi-ws2812/src/spi.py:56" *)
  always @(negedge 1'h0)
    word_received <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$11  = 1'h0;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$11  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$12  = 1'h0;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$12  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$13  = fsm_state;
    casez (fsm_state)
      3'h1:
          if (\$1 ) begin
            \$13  = 3'h0;
          end
      3'h0:
          if (cs) begin
            \$13  = 3'h2;
          end
      3'h2:
        begin
          if (\$2 ) begin
            \$13  = 3'h0;
          end
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$13  = 3'h3;
          end
        end
      3'h3:
          \$13  = 3'h4;
      3'h4:
        begin
          if (\$5 ) begin
            \$13  = 3'h0;
          end
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$13  = 3'h1;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$14  = bit_count;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          \$14  = 6'h00;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
            \$14  = \$4 [5:0];
          end else begin
            \$14  = 6'h00;
          end
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
            \$14  = \$7 [5:0];
          end else begin
            \$14  = 6'h00;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$15  = current_command;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          if (\$3 ) begin
            \$15  = { current_command[6:0], copi };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$16  = command;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
          end else begin
            \$16  = current_command;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$17  = current_word;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          if (\$6 ) begin
            \$17  = { current_word[46:0], copi };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$18  = word_received;
    casez (fsm_state)
      3'h1:
          /* empty */;
      3'h0:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
          end else begin
            \$18  = current_word;
          end
    endcase
  end
  assign clk = 1'h0;
  assign rst = 1'h0;
  assign word_width = 6'h00;
endmodule

